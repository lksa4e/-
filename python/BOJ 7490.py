문제
1부터 N까지의 수를 오름차순으로 쓴 수열 1 2 3 ... N을 생각하자.

그리고 '+'나 '-', 또는 ' '(공백)을 숫자 사이에 삽입하자(+는 더하기, -는 빼기, 공백은 숫자를 이어 붙이는 것을 뜻한다). 
이렇게 만든 수식의 값을 계산하고 그 결과가 0이 될 수 있는지를 살피자.

N이 주어졌을 때 수식의 결과가 0이 되는 모든 수식을 찾는 프로그램을 작성하라.

입력
첫 번째 줄에 테스트 케이스의 개수가 주어진다(<10).

각 테스트 케이스엔 자연수 N이 주어진다(3 <= N <= 9).

출력
각 테스트 케이스에 대해 ASCII 순서에 따라 결과가 0이 되는 모든 수식을 출력한다. 각 테스트 케이스의 결과는 한 줄을 띄워 구분한다.

예제 입력 1 
2
3
7
예제 출력 1 
1+2-3

1+2-3+4-5-6+7
1+2-3-4+5+6-7
1-2 3+4+5+6+7
1-2 3-4 5+6 7
1-2+3+4-5+6-7
1-2-3-4-5+6+7

--------------------------------------------------------------------------------------------------------
# 데이터의 개수가 많을때는 sys.stdin.readline()을 사용해야 빠르다
import sys
arr = list()
N = 0
def dfs(cnt, str):
    if cnt == N:
        arr.append(str)
        return
    dfs(cnt + 1, str + [' '] + [cnt + 1])             # 재귀형태로 모든 경우의 수를 만들어줌
    dfs(cnt + 1, str + ['+'] + [cnt + 1])
    dfs(cnt + 1, str + ['-'] + [cnt + 1])
    

T = int(input())
for _ in range(T):
    arr.clear()
    N = int(input())
    temp = list()
    temp.append(1)
    dfs(1, temp)
    for i in range(len(arr)):
        xx = ''.join(str(e) for e in arr[i])
        if eval(xx.replace(' ','')) == 0:  # replace를 통해 공백 제거 # eval은 문자열을 수식계산 해줌 
            print(xx)
    print()
