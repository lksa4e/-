문제
두 종류의 부등호 기호 ‘<’와 ‘>’가 k개 나열된 순서열 A가 있다. 우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서 모든 부등호 관계를 만족시키려고 한다.
예를 들어, 제시된 부등호 순서열 A가 다음과 같다고 하자. 

A ⇒ < < < > < < > < >

부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며 선택된 숫자는 모두 달라야 한다. 아래는 부등호 순서열 A를 만족시키는 한 예이다. 

3 < 4 < 5 < 6 > 1 < 2 < 8 > 7 < 9 > 0

이 상황에서 부등호 기호를 제거한 뒤, 숫자를 모두 붙이면 하나의 수를 만들 수 있는데 이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다. 
그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다. 예를 들어 3456128790 뿐만 아니라 5689023174도 아래와 같이 부등호 관계 A를 만족시킨다. 

5 < 6 < 8 < 9 > 0 < 2 < 3 > 1 < 7 > 4

여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의 정수 중에서 최댓값과 최솟값을 찾아야 한다. 
앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서 선택해야 하며 선택된 숫자는 모두 달라야 한다. 

입력
첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다. 그 다음 줄에는 k개의 부등호 기호가 하나의 공백을 두고 한 줄에 모두 제시된다. k의 범위는 2 ≤ k ≤ 9 이다. 

출력
여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대, 최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다. 
단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에 포함되어야 한다. 모든 입력에 답은 항상 존재하며 출력 정수는 하나의 문자열이 되도록 해야 한다. 

예제 입력 1 
2
< >
예제 출력 1 
897
021
예제 입력 2 
9
> < < < > > > < <
예제 출력 2 
9567843012
1023765489

-------------------------------------------------------------------------
문제풀이
1. 순열의 경우의 수를 먼저 구하고 그 다음에 조건 check
2. 순열의 경우의 수를 만드는 중간에 조건 check
   -> 더 빠르다.
   
순열 - dfs 백트래킹
int 범위 초과 - long 사용

------------------------------------------------------------------------

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.io.FileInputStream;
import java.util.*;
/*
 * 
String s = bf.readLine(); //String
int i = Integer.parseInt(bf.readLine()); //Int

StringTokenizer st = new StringTokenizer(s); //StringTokenizer인자값에 입력 문자열 넣음
int a = Integer.parseInt(st.nextToken()); //첫번째 호출
int b = Integer.parseInt(st.nextToken()); //두번째 호출

String array[] = s.split(" "); //공백마다 데이터 끊어서 배열에 넣음

bw.write(s+"\n");   //버퍼에 있는 값 전부 출력
bw.flush();   //남아있는 데이터를 모두 출력시킴
bw.close();   //스트림을 닫음
 
 */


public class P2529 {
	static int origin[] = {0,1,2,3,4,5,6,7,8,9};
	static boolean visit[] = new boolean[10];
	static int cand[];
	static String arr[];
	static long max_ans = -1;
	static long min_ans = Long.MAX_VALUE;
	static String max_str;
	static String min_str;
	
	static void solve() {
		int cnt = 0;
		int flag = 1;
		for(int i = 0; i < arr.length; i++) {
			if(arr[i].equals("<")) {
				if(cand[i] >= cand[i+1]) {
					flag = 0;
					break;
				}
			}else {
				if(cand[i] <= cand[i+1]) {
					flag = 0;
					break;
				}
			}
		}
		
		if(flag == 1) {
			String num_str = Arrays.toString(cand).replaceAll("[^0-9]","");
			long num = Long.parseLong(num_str);
			if(num > max_ans) {
				max_ans = num;
				max_str = num_str;
			}
			if(num < min_ans) {
				min_ans = num;
				min_str = num_str;
			}
		}
	}
	static void permutation(int depth, int r) {
		if(depth == r) {
			solve();
			return;
		}
		for(int i = 0; i < 10; i++) {
			if(!visit[i]) {
				visit[i] = true;
				cand[depth] = i;
				permutation(depth + 1 , r);
				visit[i] = false;
			}
		}
	}
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("src/input.txt"));
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in)); //선언
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));   //할당된 버퍼에 값 넣어주기
		int N = Integer.parseInt(bf.readLine());
		String s = bf.readLine(); //String
		StringTokenizer st = new StringTokenizer(s);
		arr = s.split(" ");
		cand = new int[N + 1];
		permutation(0 ,N + 1);
		System.out.println(max_str);
		System.out.println(min_str);
	}

}
