문제 설명
땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다.
1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 
단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

예를 들면,

| 1 | 2 | 3 | 5 |

| 5 | 6 | 7 | 8 |

| 4 | 3 | 2 | 1 |

로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 
위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.

제한사항
행의 개수 N : 100,000 이하의 자연수
열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.
점수 : 100 이하의 자연수

입출력 예
land	answer
[[1,2,3,5],[5,6,7,8],[4,3,2,1]]	16
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

---------------------------------
dp를 이용하여 문제를 해결해 준다.

dp[i][j]를 i행까지 내려온 경우 j번째 칸을 밟았을 때까지의 최대값 이라고 하자
연속해서 두 칸을 밟지 못하므로, 점화식은 같은 j를 제외하는 아래와 같은 식이 된다.
dp[i][j] = max(dp[i-1][0] ~ dp[i-1][j-1], dp[i-1][j+1] ~ dp[i-1][N-1])

문제의 경우 전체 칸의 수가 4개밖에 안되므로 그냥 수작업으로 푸는게 편하다.
-------------------------------
#include <iostream>
#include <vector>
using namespace std;

int dp[100001][4];
int solution(vector<vector<int> > land)
{
    int answer = 0;
    
    for(int i = 0; i < 4; i++){
        dp[0][i] = land[0][i];
    }
    for(int i = 1; i < land.size(); i++){
        dp[i][0] = max(max(dp[i-1][1], dp[i-1][2]), dp[i-1][3]) + land[i][0];
        dp[i][1] = max(max(dp[i-1][0], dp[i-1][2]), dp[i-1][3]) + land[i][1];
        dp[i][2] = max(max(dp[i-1][1], dp[i-1][0]), dp[i-1][3]) + land[i][2];
        dp[i][3] = max(max(dp[i-1][1], dp[i-1][2]), dp[i-1][0]) + land[i][3];
    }
    for(int i = 0; i < 4; i++){
        answer = max(answer,dp[land.size()-1][i]);
    }

    return answer;
}
