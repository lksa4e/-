문제
한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 
각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 
한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.

입력
첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 
시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.

출력
첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.

예제 입력 1 
11
1 4
3 5
0 6
5 7
3 8
5 9
6 10
8 11
8 12
2 13
12 14
예제 출력 1 
4

--------------------------------------------------------------
기본적으로 회의는 이전 회의가 끝나야지 진행할 수 있다.
가장 많이 회의를 하는 방법은 가장 빨리 끝나는 회의를 먼저 진행하는 것이다. 

이전까지의 회의 진행횟수가 동일할 때
두 회의 (A,B) 의 진행시간이 겹치고, 종료시간이 각각 i, j (i < j) 일때 종료시간이 빠른(A) 것을 선택하는 경우에 더 많은 회의를 진행할 수 없다.
1. 시작 시간의 차이
if( A의 시작시간 == B의 시작시간) 이 경우는 A의 종료시간이 빠르므로 볼것도 없이 A가 B보다 많은 회의를 진행할 수 있다.
if( A의 시작시간 < B의 시작시간) 시작시간의 차이에서 C라는 회의가 발생하는 것을 고려한다면 A,B 비교가 아니라 A, C 비교가 되고 이 역시 종료시간이 빠른 C 가 선택되는 결과이다.
if( A의 시작시간 > B의 시작시간) 이 경우 중간에 회의가 발생할 수 있다고 하면 A가 B보다 많은 회의를 처리하는 것은 변함이 없다.

2. 종료 시간의 차이
A가 B보다 종료되기 때문에 그 사이에서 다른 회의를 처리할 수 있는 경우의 수가 생기고, 당연히 A를 선택하는것이 더 많은 회의를 진행할 수 있다.

즉, 회의의 시작 시간을 기준으로 정렬하고 회의를 진행할 수 있는 즉시 바로 처리한다면, 가장 많은 회의를 진행할 수 있다.

회의 종료 시간을 기준으로 sorting을 하고 다음 회의 진행이 가능하면 (현재 진행중인 회의 종료시간보다 다음 회의 시작시간이 늦은경우) 바로 회의를 진행한다.

-------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
using namespace std;
vector<pair<int, int>> v;  //시작, 종료
bool cmp(pair<int, int> a, pair<int, int> b) {
	if (a.second == b.second)return a.first < b.first;
	else return a.second < b.second;
}
int main() {
	int N, a, b, cur_time = 0, cnt = 0;
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> a >> b;
		v.push_back({ a,b });
	}
	sort(v.begin(), v.end(), cmp);
	for (int i = 0; i < v.size(); i++) {
		if (cur_time <= v[i].first) {
			cur_time = v[i].second;
			cnt++;
		}
	}
	cout << cnt;
	return 0;
}
