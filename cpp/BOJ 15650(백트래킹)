문제
자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열
고른 수열은 오름차순이어야 한다.
입력
첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

출력
한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.

수열은 사전 순으로 증가하는 순서로 출력해야 한다.

예제 입력 1 
3 1
예제 출력 1 
1
2
3
예제 입력 2 
4 2
예제 출력 2 
1 2
1 3
1 4
2 3
2 4
3 4
예제 입력 3 
4 4
예제 출력 3 
1 2 3 4

알고리즘 분류
백트래킹

---------------------------------------------------------
백트래킹 문제를 구현하는 방법
1. dfs를 돌면서 vector에 정답을 push, pop 해가면서 탐색
2. dfs를 돌면서 전역변수 arr에 값을 넣어주는 방법

중복되는 숫자도 존재하지 않고, 오름차순으로 단순히 출력하면 되므로 visit 배열을 사용할 필요가 없다.

--------------------------------------------------------
1번 방법
#include <iostream>
#include <map>
#include <vector>
#include <queue>
#include <tuple>
#include <stack>
#include <string>
#include <algorithm>
#pragma warning(disable:4996)

#define all(x) (x).begin,(x).end
#define INF int(1e9)
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define txtcin freopen("input.txt", "r", stdin);
#define fst first  
#define snd second


using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
int N, M;
bool visit[9];
int result = INF;
void solve(int idx, int cnt, vector<int> v) {
	if (cnt == M) {
		for (int i = 0; i < v.size(); i++) {
			cout << v[i] << " ";
		}
		cout << '\n';
		return;
	}
	for (int i = idx; i <= N; i++) {
		v.push_back(i);
		solve( i+1 , cnt + 1, v);
		v.pop_back();
	}
}

int main() {
	fastio;
	int a, b;
	cin >> N >> M;
	vector<int> answer;
	solve(1, 0, answer);
	return 0;
}

-----------------------------------------
2번방법
#include <iostream>
#include <map>
#include <vector>
#include <queue>
#include <tuple>
#include <stack>
#include <string>
#include <algorithm>
#pragma warning(disable:4996)

#define all(x) (x).begin,(x).end
#define INF int(1e9)
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define txtcin freopen("input.txt", "r", stdin);
#define fst first  
#define snd second


using namespace std;
typedef pair<int, int> pii;
typedef long long ll;
int N, M;
bool visit[9];
int arr[9];
int result = INF;
void solve(int idx, int cnt) {
	if (cnt == M) {
		for (int i = 1; i <= M;  i++) {
			cout << arr[i] << " ";
		}
		cout << '\n';
		return;
	}
	for (int i = idx; i <= N; i++) {
		arr[cnt + 1] = i;
		solve( i+1 , cnt + 1);
	}
}

int main() {
	fastio;
	int a, b;
	cin >> N >> M;
	solve(1, 0);
	return 0;
}
