네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬 때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는 게임입니다.

다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.

1478 → "one4seveneight"
234567 → "23four5six7"
10203 → "1zerotwozero3"
이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.

참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.

숫자	영단어
0	zero
1	one
2	two
3	three
4	four
5	five
6	six
7	seven
8	eight
9	nine
제한사항
1 ≤ s의 길이 ≤ 50
s가 "zero" 또는 "0"으로 시작하는 경우는 주어지지 않습니다.
return 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.

입출력 예
s	result
"one4seveneight"	1478
"23four5six7"	234567
"2three45sixseven"	234567
"123"	123
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.
입출력 예 #2

문제 예시와 같습니다.
입출력 예 #3

"three"는 3, "six"는 6, "seven"은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다.
입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.
입출력 예 #4

s에는 영단어로 바뀐 부분이 없습니다.

--------------------------------------------------------------
1. 문자인 경우 : string 문자를 숫자로 변환
2. 숫자인 경우 : 숫자를 그대로 붙이기

1을 위해 map<string, int> 를 사용한다.


---------------------------------------------------

#include <string>
#include <vector>
#include <map>
#include <cctype>
using namespace std;
map<string, int> m;
void init(){           // 문자를 숫자로 바꿔주기 위한 map 초기화
    m["zero"] = 1;      // map에 없는 string으로 검색을 하는 경우 0이 나오는데 zero도 0으로 세팅해준다면 0을 찾을 수 없다. 따라서 1 증가시켜서 저장 후 마지막에 1감소
    m["one"] = 2;
    m["two"] = 3;
    m["three"] = 4;
    m["four"] = 5;
    m["five"] = 6;
    m["six"] = 7;
    m["seven"] = 8;
    m["eight"] = 9;
    m["nine"] = 10;
}
int solution(string s) {
    string answer = "";
    string temp = "";
    init();
    for(int i = 0; i < s.size(); i++){
        if(isdigit(s[i])){                  //숫자인 경우 그대로 붙이기
            answer.push_back(s[i]);
        }else{
            temp.push_back(s[i]);
            if(m[temp] != 0){                     //만약 지금까지 저장한 문자가 변환이 가능한 경우
                answer += to_string(m[temp]-1);    //변환 후 정답배열에 붙이기
                temp = "";
            }
        }
    }
    return stoi(answer);
}
