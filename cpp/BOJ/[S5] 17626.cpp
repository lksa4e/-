문제
라그랑주는 1770년에 모든 자연수는 넷 혹은 그 이하의 제곱수의 합으로 표현할 수 있다고 증명하였다. 
어떤 자연수는 복수의 방법으로 표현된다. 예를 들면, 26은 52과 12의 합이다; 또한 42 + 32 + 12으로 표현할 수도 있다. 
역사적으로 암산의 명수들에게 공통적으로 주어지는 문제가 바로 자연수를 넷 혹은 그 이하의 제곱수 합으로 나타내라는 것이었다. 
1900년대 초반에 한 암산가가 15663 = 1252 + 62 + 12 + 12라는 해를 구하는데 8초가 걸렸다는 보고가 있다. 
좀 더 어려운 문제에 대해서는 56초가 걸렸다: 11339 = 1052 + 152 + 82 + 52.

자연수 n이 주어질 때, n을 최소 개수의 제곱수 합으로 표현하는 컴퓨터 프로그램을 작성하시오.

입력
입력은 표준입력을 사용한다. 입력은 자연수 n을 포함하는 한 줄로 구성된다. 여기서, 1 ≤ n ≤ 50,000이다.

출력
출력은 표준출력을 사용한다. 합이 n과 같게 되는 제곱수들의 최소 개수를 한 줄에 출력한다.

예제 입력 1 
25
예제 출력 1 
1
예제 입력 2 
26
예제 출력 2 
2
예제 입력 3 
11339
예제 출력 3 
3
예제 입력 4 
34567
예제 출력 4 
4

알고리즘 분류
다이나믹 프로그래밍
브루트포스 알고리즘

-------------------------------------------------------------------
단순하게 가장 큰 제곱부터 빼는 그리디한 방식으로 접근하면 예외가 발생한다.
ex) 18 => 4^2 + 1^2 + 1^2   //  18 => 3^2 + 3^2

따라서 가능한 모든 경우의 수를 고려하는 dp 방식으로 문제를 해결해야 한다.

제곱수의 합으로 표현하기 때문에 X = (제곱,,,,,) + 제곱 의 형태를 가진다.
N이 되기 위해선 이전까지의 숫자 + 제곱수 형태로 구하게 된다.
N - 1 -> N  (N-1)까지 만들고 마지막에 1^2을 더함
N - 4 -> N  (N-4)까지 만들고 마지막에 2^2을 더함
....
ex) 23보다 작은 제곱수들을 다 보는 것이다.
1, 4, 9, 16이 있으면 23에서 해당 값들을 뺀 값인
dp[22], dp[19], dp[14], dp[7] 중에서
가장 작은 값에 +1을 해준 값이 dp[23]이 된다.
.....

dp[] 배열을 선언하여 dp[i]를 i를 제곱수로 만들기 위한 최소의 가지수로 정의한다.
dp[i] = min(dp[i - 1], dp[i - 4], dp[i - 9],,,,) + 1 로 정의된다.

-------------------------------------------------------------
#include <iostream>
#include <map>
#include <queue>
#include <tuple>
#include <math.h>
#include <algorithm>
#pragma warning(disable:4996)
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
#define txtcin freopen("input.txt", "r", stdin);
#define txtout freopen("output.txt", "w", stdout);
using namespace std;
int dp[50001];
int pow_arr[250];
int main() {
	fastio;
	int N, cnt = 0;
	cin >> N;
	for (int i = 1; i <= int(sqrt(N)) + 1; i++) {
		pow_arr[i] = i * i;
	}
	dp[0] = 0;
	dp[1] = 1;
	for (int i = 2; i <= N; i++) {
		int result = 99999;
		for (int k = int(sqrt(i)); k > 0; k--) {
			int temp = i - pow_arr[k];
			result = min(result, dp[temp]);
		}
		dp[i] = result + 1;
	}
	cout << dp[N];
	return 0;
}


