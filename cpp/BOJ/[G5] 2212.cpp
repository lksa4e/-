문제
한국도로공사는 고속도로의 유비쿼터스화를 위해 고속도로 위에 N개의 센서를 설치하였다. 
문제는 이 센서들이 수집한 자료들을 모으고 분석할 몇 개의 집중국을 세우는 일인데, 예산상의 문제로, 고속도로 위에 최대 K개의 집중국을 세울 수 있다고 한다.

각 집중국은 센서의 수신 가능 영역을 조절할 수 있다. 집중국의 수신 가능 영역은 고속도로 상에서 연결된 구간으로 나타나게 된다. 
N개의 센서가 적어도 하나의 집중국과는 통신이 가능해야 하며, 집중국의 유지비 문제로 인해 각 집중국의 수신 가능 영역의 길이의 합을 최소화해야 한다.

편의를 위해 고속도로는 평면상의 직선이라고 가정하고, 센서들은 이 직선 위의 한 기점인 원점으로부터의 정수 거리의 위치에 놓여 있다고 하자. 
따라서, 각 센서의 좌표는 정수 하나로 표현된다. 이 상황에서 각 집중국의 수신 가능영역의 거리의 합의 최솟값을 구하는 프로그램을 작성하시오. 
단, 집중국의 수신 가능영역의 길이는 0 이상이며 모든 센서의 좌표가 다를 필요는 없다.

입력
첫째 줄에 센서의 개수 N(1<=N<=10,000), 둘째 줄에 집중국의 개수 K(1<=K<=1000)가 주어진다. 셋째 줄에는 N개의 센서의 좌표가 한 개의 정수로 N개 주어진다. 
각 좌표 사이에는 빈 칸이 하나 이상 있으며, 좌표의 절댓값은 1,000,000 이하이다.

출력
첫째 줄에 문제에서 설명한 최대 K개의 집중국의 수신 가능 영역의 길이의 합의 최솟값을 출력한다.

예제 입력 1 
6
2
1 6 9 3 6 7
예제 출력 1 
5

-----------------------------------------------------------------------------------------------------------------
기지국이 1개인 경우에는 1개의 기지국으로 모든 센서를 연결해야 하고
--> 1개의 기지국이 가장 멀리 떨어진 센서까지 닿아야 함

기지국이 2개인 경우에는 2개의 기지국으로 모든 센서를 연결한다.
--> 2개의 기지국이기 때문에 중간에 낭비되는 거리만큼을 1번 jump 할 수 있음
--> 2개의 기지국이 2개의 영역을 차지함

기지국이 N개인 경우에는 N개의 기지국으로 모든 센서를 연결한다.
--> N개의 기지국이기 때문에 중간에 낭비되는 거리를 N-1번 jump 할 수 있음

===> 센서를 순서대로 정렬하고, 센서들의 거리를 구해서, 그 거리를 정렬한다.
     그 다음 기지국의 개수만큼 낭비되는 거리 중 큰것들부터 제외한다.

---------------------------------------------------------------------------------------------
같은 풀이.. 조금 다른 설명
1개의 기지국 --> 1개의 cover 영역
2개의 기지국 --> 2개의 cover 영역 --> cover영역을 2개로 나누려면 1번의 끊기가 필요함 --> 연결고리 중(센서 거리 차) 가장 긴 것으로 끊기
(위의 설명의 jump와 동일)
N개의 기지국 --> N개의 cover 영역 --> cover 영역을 N개로 나누려면 N-1번의 끊기가 필요

-------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#define fastio ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)
using namespace std;
vector<int> road;
vector<int> dist;
int main() {
	int N, K, a;
	cin >> N >> K;
	for (int i = 0; i < N; i++) {
		cin >> a;
		road.push_back(a);
	}
	if (road.size() == 1) {
		cout << 0;
		return 0;
	}
	sort(road.begin(), road.end());
	for (int i = 0; i < road.size() - 1; i++) {
		dist.push_back(road[i + 1] - road[i]);
	}
	sort(dist.begin(), dist.end());      //sort를 통해 가장 jump할 거리를 제일 뒤쪽으로 보낸다. 
	int result = 0;
	for (int i = 0; i < N - K; i++) {    //기지국의 개수만큼 낭비되는 거리를 jump 할 수 있음
		result += dist[i];
	}
	cout << result;
	return 0;
}
